type Token = principal;
type Amount = nat;
type AccountRevision = nat;
type SessionNumber = nat;

type TokenInfo = record {
  allowance_fee : Amount;
  deposit_fee : Amount;
  withdrawal_fee : Amount
};

type Subaccount = blob;

type NotifyArg = record {
  token : Token
};

type NotifyResult = record {
  deposit_inc : Amount;
  credit_inc : Amount;
  credit : int
};

type NotifyResponse = variant {
  Ok : NotifyResult;
  Err : variant {
    CallLedgerError : record { message : text };
    NotAvailable : record { message : text }
  }
};

type WithdrawArgs = record {
  to : Account;
  amount : Amount;
  token : Token;
  expected_fee : opt nat
};

type WithdrawResponse = variant {
  Ok : record {
    txid : nat;
    amount : Amount
  };
  Err : variant {
    BadFee : record { expected_fee : nat };
    CallLedgerError : record { message : text };
    InsufficientCredit : record {};
    AmountBelowMinimum : record {}
  }
};

type DepositArgs = record {
  token : Token;
  amount : Amount;
  from : Account;
  expected_fee : opt nat
};

type Account = record {
  owner : principal;
  subaccount : opt Subaccount
};

type DepositResult = record {
  txid : nat;
  credit_inc : Amount;
  credit : int
};

type DepositResponse = variant {
  Ok : DepositResult;
  Err : variant {
    AmountBelowMinimum : record {};
    BadFee : record { expected_fee : nat };
    CallLedgerError : record { message : text };
    TransferError : record { message : text }; // insufficient allowance or insufficient funds
  }
};

type OrderId = nat;

type OrderBookType = variant {
  delayed;
  immediate
};

type Order = record {
  icrc1Ledger : Token;
  orderBookType : OrderBookType;
  price : float64;
  volume : nat
};

type CancellationArg = variant {
  all : opt vec Token;
  orders : vec variant { ask : OrderId; bid : OrderId }
};
type PlaceArg = vec variant {
  ask : record { Token; OrderBookType; nat; float64 };
  bid : record { Token; OrderBookType; nat; float64 }
};

type ManageOrdersResponse = variant {
  Ok : record {
    vec record {
      OrderId;
      Token;
      OrderBookType;
      nat;
      float64
    };
    vec record {
      OrderId;
      variant { placed; executed : vec record { float64; nat } }
    }
  };
  Err : variant {
    AccountRevisionMismatch;
    UnknownPrincipal;
    cancellation : record {
      index : nat;
      error : variant {
        UnknownAsset;
        UnknownOrder
      }
    };
    placement : record {
      index : nat;
      error : variant {
        ConflictingOrder : record { variant { ask; bid }; opt OrderId };
        NoCredit;
        TooLowOrder;
        UnknownAsset;
        PriceDigitsOverflow : record { maxDigits : nat };
        VolumeStepViolated : record { baseVolumeStep : nat }
      }
    }
  }
};

type PlaceOrderResponse = variant {
  Ok : record {
    OrderId;
    variant { placed; executed : vec record { float64; nat } }
  };
  Err : variant {
    ConflictingOrder : record { variant { ask; bid }; opt OrderId };
    NoCredit;
    TooLowOrder;
    UnknownAsset;
    UnknownPrincipal;
    PriceDigitsOverflow : record { maxDigits : nat };
    VolumeStepViolated : record { baseVolumeStep : nat };
    AccountRevisionMismatch
  }
};
type ReplaceOrderResponse = variant {
  Ok : record {
    OrderId;
    variant { placed; executed : vec record { float64; nat } }
  };
  Err : variant {
    ConflictingOrder : record { variant { ask; bid }; opt OrderId };
    NoCredit;
    TooLowOrder;
    UnknownAsset;
    UnknownOrder;
    UnknownPrincipal;
    PriceDigitsOverflow : record { maxDigits : nat };
    VolumeStepViolated : record { baseVolumeStep : nat };
    AccountRevisionMismatch
  }
};
type CancelOrderResponse = variant {
  Ok : record {
    OrderId;
    Token;
    OrderBookType;
    nat;
    float64
  };
  Err : variant {
    UnknownOrder;
    UnknownPrincipal;
    AccountRevisionMismatch
  }
};

type IndicativeStats = record {
  clearing : variant {
    match : record {
      price : float64;
      volume : nat
    };
    noMatch : record {
      minAskPrice : opt float64;
      maxBidPrice : opt float64
    }
  };
  totalAskVolume : nat;
  totalBidVolume : nat
};

service : (opt principal, opt principal) -> {
  // =========================================================== ICRC-84 API ===========================================================
  // helper function
  principalToSubaccount : (principal) -> (opt blob) query;

  // public queries
  icrc84_supported_tokens : () -> (vec Token) query;
  icrc84_token_info : (Token) -> (TokenInfo) query;

  // private queries
  icrc84_query : (vec Token) -> (
    vec record {
      Token;
      record {
        credit : int;
        tracked_deposit : opt Amount
      }
    }
  ) query;

  // updates
  icrc84_notify : (NotifyArg) -> (NotifyResponse);
  icrc84_deposit : (DepositArgs) -> (DepositResponse);
  icrc84_withdraw : (WithdrawArgs) -> (WithdrawResponse);

  // =========================================================== BTC API ===========================================================
  // returns BTC address on mainnet for depositing to user of given principal if provided. Else caller principal is used
  btc_depositAddress : (opt principal) -> (text) query;

  // claim BTC deposit
  btc_notify : () -> (
    variant {
      Ok : record {
        credit : int;
        credit_inc : nat;
        deposit_inc : nat
      };
      Err : variant {
        AlreadyProcessing;
        CallLedgerError : record { message : text };
        GenericError : record {
          error_code : nat64;
          error_message : text
        };
        NoNewUtxos : record {
          current_confirmations : opt nat32;
          pending_utxos : opt vec record {
            confirmations : nat32;
            outpoint : record {
              txid : vec nat8;
              vout : nat32
            };
            value : nat64
          };
          required_confirmations : nat32;
          suspended_utxos : opt vec record {
            earliest_retry : nat64;
            reason : variant {
              Quarantined;
              ValueTooSmall
            };
            utxo : record {
              height : nat32;
              outpoint : record {
                txid : vec nat8;
                vout : nat32
              };
              value : nat64
            }
          }
        };
        NotAvailable : record { message : text };
        TemporarilyUnavailable : text;
        NotMinted
      }
    }
  );

  // withdraw BTC to the mainnet bitcoin address
  btc_withdraw : (
    record {
      amount : nat;
      to : text
    }
  ) -> (
    variant {
      Ok : record { block_index : nat64 };
      Err : variant {
        AllowanceChanged : record { current_allowance : nat };
        AlreadyProcessing;
        AmountTooLow : nat64;
        BadFee : record { expected_fee : nat };
        CreatedInFuture : record { ledger_time : nat64 };
        Duplicate : record { duplicate_of : nat };
        Expired : record { ledger_time : nat64 };
        GenericError : record {
          error_code : nat64;
          error_message : text
        };
        InsufficientAllowance : record { allowance : nat64 };
        InsufficientCredit : record {};
        InsufficientFunds : record { balance : reserved };
        MalformedAddress : text;
        TemporarilyUnavailable : reserved;
        TooOld
      }
    }
  );
  // check withdrawal status
  btc_withdrawal_status : (record { block_index : nat64 }) -> (
    variant {
      AmountTooLow;
      Confirmed : record { txid : blob };
      Pending;
      Reimbursed : record {
        account : record {
          owner : principal;
          subaccount : opt blob
        };
        amount : nat64;
        mint_block_index : nat64;
        reason : variant {
          CallFailed;
          TaintedDestination : record {
            kyt_fee : nat64;
            kyt_provider : principal
          }
        }
      };
      Sending : record { txid : blob };
      Signing;
      Submitted : record { txid : blob };
      Unknown;
      WillReimburse : record {
        account : record {
          owner : principal;
          subaccount : opt blob
        };
        amount : nat64;
        reason : variant {
          CallFailed;
          TaintedDestination : record {
            kyt_fee : nat64;
            kyt_provider : principal
          }
        }
      }
    }
  );

  // =========================================================== Cycles API ===========================================================
  // withdraw native cycles to the canister with provided id
  cycles_withdraw : (record { to : principal; amount : nat }) -> (
    variant {
      Ok : record { txid : nat; amount : nat };
      Err : variant {
        FailedToWithdraw : record {
          rejection_code : variant {
            NoError;
            CanisterError;
            SysTransient;
            DestinationInvalid;
            Unknown;
            SysFatal;
            CanisterReject
          };
          fee_block : opt nat;
          rejection_reason : text
        };
        GenericError : record {
          error_code : nat64;
          error_message : text
        };
        TemporarilyUnavailable;
        Duplicate : record { duplicate_of : nat };
        InsufficientCredit : record {};
        TooLowAmount : record {};
        BadFee : record { expected_fee : nat };
        InvalidReceiver : record { receiver : principal };
        CreatedInFuture : record { ledger_time : nat64 };
        TooOld;
        InsufficientFunds : record { balance : nat }
      }
    }
  );

  // ============================================================ SYSTEM API ===========================================================
  // returns principal of the quote token ICRC1 ledger canister
  getQuoteLedger : () -> (principal) query;

  // returns timestamp and number of next auction session
  nextSession : () -> (
    record {
      timestamp : nat;
      counter : nat
    }
  ) query;

  // returns auction settings
  // `orderQuoteVolumeMinimum` is the minimum quote token volume that should be set by user when placing order.
  // `orderQuoteVolumeStep` is the required step of quote token volume, so `quoteVolume % orderQuoteVolumeStep` has to be 0.
  // `orderPriceDigitsLimit` is the maximum amount of significant digits in provided by user price in the order
  //
  // Note: when placing orders, volume is set in base token units. It is a responsibility of client to calculate min volume and volume step
  // in base tokens according to the price in the order.
  //
  // Example:
  // func calculateBaseVolumeStep(price : Float) : Nat {
  //   let p = price / Float.fromInt(orderQuoteVolumeStep);
  //   if (p >= 1) return 1;
  //   let zf = - Float.log(p) / 2.302_585_092_994_045;
  //   Int.abs(10 ** Float.toInt(zf));
  // };
  settings : () -> (record { orderQuoteVolumeMinimum : nat; orderQuoteVolumeStep : nat; orderPriceDigitsLimit : nat }) query;

  // returns information about auction results if acution session happened now
  indicativeStats : (principal) -> (IndicativeStats) query;

  // ========================================================= USER API ==========================================================

  // an atomic query that allows to fetch various state info at once.
  // arguments are: tokens that caller is interested in and selector object. Results are all filtered by provided tokens.
  // providing empty array as tokens argument results in data across all the registered tokens.
  // Each "opt bool" argument returns results only when ?true is provided
  auction_query : (
    vec Token,
    record {
      session_numbers : opt bool;
      asks : opt bool;
      bids : opt bool;
      credits : opt bool;
      // aruments are (limit; skip), implements pagination
      deposit_history : opt record { nat; nat };
      // aruments are (limit; skip), implements pagination
      transaction_history : opt record { nat; nat };
      // aruments are (limit; skip; skipEmpty), implements pagination and filtering
      price_history : opt record { nat; nat; bool };
      // aruments are (limit; skip), implements pagination
      immediate_price_history : opt record { nat; nat };
      // reverses price, transaction and deposit history lists. ?true returns histories in descending chronological order
      reversed_history : opt bool;
      last_prices : opt bool
    }
  ) -> (
    record {
      // session numbers per token
      session_numbers : vec record { Token; SessionNumber };
      // caller's opened asks
      asks : vec record { OrderId; Order };
      // caller's opened bids
      bids : vec record { OrderId; Order };
      // caller's wallet information
      //
      // `total` is the total caller balance in the wallet
      // `available` is the balance, available for placing orders and withdrawal
      // `locked` is the balance, which is locked by currently placed orders
      //
      // Note: `total` is always equal to `available + locked`
      credits : vec record {
        Token;
        record { total : nat; available : nat; locked : nat }
      };
      // history of deposit events.
      // return values are: timestamp in nanoseconds; type; ICRC1 ledger principal; operation volume;
      deposit_history : vec record {
        nat64;
        variant {
          deposit;
          withdrawal : opt variant {
            icrc1Address : record { principal; opt blob };
            btcDirect : text;
            cyclesDirect : principal;
          };
        };
        Token;
        nat
      };
      // history of transactions caused by order fulfillments.
      // return values are: timestamp in nanoseconds; number of auction session; transaction type; ICRC1 ledger principal; transaction volume; transaction price
      transaction_history : vec record {
        nat64;
        nat;
        variant { ask; bid };
        Token;
        nat;
        float64
      };
      // history of clearing price per token / auction session.
      // return values are: timestamp in nanoseconds; number of auction session; ICRC1 ledger principal; volume sold; price
      price_history : vec record { nat64; nat; Token; nat; float64 };
      // history of clearing price when immediate order book has been executed
      // return values are: timestamp in nanoseconds; 0; ICRC1 ledger principal; volume sold; price
      immediate_price_history : vec record { nat64; nat; Token; nat; float64 };
      // last non-zero clearing price per token
      last_prices : vec record { nat64; nat; Token; nat; float64 };
      // amount of caller's loyalty points
      points : nat;
      // current caller's account revision
      account_revision : nat
    }
  ) query;

  // An atomic function to manage caller's orders. In case of failure no changes will be applied
  // arguments are:
  // - cancellation: the rules which active orders should be cancelled
  // - placements: an array of orders to be placed
  // - account revision: optionally set expected current caller's account revision. If set and it does not match the actual account revision, the function will return an error
  // returns array of placed order id-s in case of success
  manageOrders : (opt CancellationArg, PlaceArg, opt AccountRevision) -> (ManageOrdersResponse);

  // A shortcut for `manageOrders` which only places asks
  // arguments are: array of orders and account revision (optional).
  // If account revision set and it does not match the actual account revision, the function will return an error
  placeAsks : (vec record { Token; OrderBookType; nat; float64 }, opt AccountRevision) -> (vec PlaceOrderResponse);

  // A shortcut for `manageOrders` which replaces single ask
  // arguments are: order id, new order info and account revision (optional).
  // If account revision set and it does not match the actual account revision, the function will return an error
  replaceAsk : (OrderId, nat, float64, opt AccountRevision) -> (ReplaceOrderResponse);

  // A shortcut for `manageOrders` which cancels asks by given order ids
  // arguments are: order ids and account revision (optional).
  // If account revision set and it does not match the actual account revision, the function will return an error
  cancelAsks : (vec OrderId, opt AccountRevision) -> (vec CancelOrderResponse);

  // A shortcut for `manageOrders` which only places bids
  // arguments are: array of orders and account revision (optional).
  // If account revision set and it does not match the actual account revision, the function will return an error
  placeBids : (vec record { Token; OrderBookType; nat; float64 }, opt AccountRevision) -> (vec PlaceOrderResponse);

  // A shortcut for `manageOrders` which replaces single bid
  // arguments are: order id, new order info and account revision (optional).
  // If account revision set and it does not match the actual account revision, the function will return an error
  replaceBid : (OrderId, nat, float64, opt AccountRevision) -> (ReplaceOrderResponse);

  // A shortcut for `manageOrders` which cancels bids by given order ids
  // arguments are: order ids and account revision (optional).
  // If account revision set and it does not match the actual account revision, the function will return an error
  cancelBids : (vec OrderId, opt AccountRevision) -> (vec CancelOrderResponse);

  // =========================================================== ADMIN API ===========================================================
  // returns list of auction admins
  listAdmins : () -> (vec principal) query;

  // registers a new admin to the auction
  addAdmin : (principal) -> ();

  // deregister an existing admin from the auction. Note: caller cannot deregister themselves
  removeAdmin : (principal) -> ();

  // register new base token
  registerAsset : (principal, nat) -> (variant { Ok : nat; Err : variant { AlreadyRegistered } })
}
