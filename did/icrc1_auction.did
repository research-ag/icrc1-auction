type Token = principal;
type Amount = nat;

type TokenInfo = record {
  allowance_fee : Amount;
  deposit_fee : Amount;
  withdrawal_fee : Amount;
};

type Subaccount = blob;

type NotifyArg = record {
  token : Token;
};

type NotifyResult = record {
  deposit_inc : Amount;
  credit_inc : Amount;
  credit : int;
};

type NotifyResponse = variant {
  Ok : NotifyResult;
  Err : variant {
    CallLedgerError : record { message : text };
    NotAvailable : record { message : text };
  };
};

type WithdrawArgs = record {
  to : Account;
  amount : Amount;
  token : Token;
  expected_fee : opt nat;
};

type WithdrawResponse = variant {
  Ok : record {
    txid : nat;
    amount : Amount;
  };
  Err : variant {
    BadFee : record { expected_fee : nat };
    CallLedgerError : record { message : text };
    InsufficientCredit : record {};
    AmountBelowMinimum : record {};
  };
};

type DepositArgs = record {
  token : Token;
  amount : Amount;
  from : Account;
  expected_fee : opt nat;
};

type Account = record {
  owner : principal;
  subaccount : opt Subaccount;
};

type DepositResult = record {
  txid : nat;
  credit_inc : Amount;
  credit : int;
};

type DepositResponse = variant {
  Ok : DepositResult;
  Err : variant {
    AmountBelowMinimum : record {};
    BadFee : record { expected_fee : nat };
    CallLedgerError : record { message : text };
    TransferError : record { message : text }; // insufficient allowance or insufficient funds
  };
};

type OrderId = nat;
type SessionNumber = nat;

type Order = record {
  icrc1Ledger : Token;
  price : float64;
  volume : nat;
};

type CancellationArg = variant {
  all : opt vec Token;
  orders : vec variant { ask : OrderId; bid : OrderId };
};
type PlaceArg = vec variant {
  ask : record { Token; nat; float64 };
  bid : record { Token; nat; float64 };
};

type ManageOrdersResponse = variant {
  Ok : record {
    vec record {
      OrderId;
      Token;
      nat;
      float64;
    };
    vec OrderId;
  };
  Err : variant {
    SessionNumberMismatch : Token;
    UnknownPrincipal;
    cancellation : record {
      index : nat;
      error : variant {
        UnknownAsset;
        UnknownOrder;
      };
    };
    placement : record {
      index : nat;
      error : variant {
        ConflictingOrder : record { variant { ask; bid }; opt OrderId };
        NoCredit;
        TooLowOrder;
        UnknownAsset;
        PriceDigitsOverflow : record { maxDigits : nat };
        VolumeStepViolated : record { baseVolumeStep : nat };
      };
    };
  };
};

type PlaceOrderResponse = variant {
  Ok : OrderId;
  Err : variant {
    ConflictingOrder : record { variant { ask; bid }; opt OrderId };
    NoCredit;
    TooLowOrder;
    UnknownAsset;
    UnknownPrincipal;
    PriceDigitsOverflow : record { maxDigits : nat };
    VolumeStepViolated : record { baseVolumeStep : nat };
    SessionNumberMismatch : Token;
  };
};
type ReplaceOrderResponse = variant {
  Ok : OrderId;
  Err : variant {
    ConflictingOrder : record { variant { ask; bid }; opt OrderId };
    NoCredit;
    TooLowOrder;
    UnknownAsset;
    UnknownOrder;
    UnknownPrincipal;
    PriceDigitsOverflow : record { maxDigits : nat };
    VolumeStepViolated : record { baseVolumeStep : nat };
    SessionNumberMismatch : Token;
  };
};
type CancelOrderResponse = variant {
  Ok : record {
    OrderId;
    Token;
    nat;
    float64;
  };
  Err : variant {
    UnknownOrder;
    UnknownPrincipal;
    SessionNumberMismatch : Token;
  };
};

type IndicativeStats = record {
  clearing : variant {
    match : record {
      price : float64;
      volume : nat;
    };
    noMatch : record {
      minAskPrice : opt float64;
      maxBidPrice : opt float64;
    };
  };
  totalAskVolume : nat;
  totalBidVolume : nat;
};

service : (opt principal, opt principal) -> {
  // ICRC-84 API
  // helper function
  principalToSubaccount : (principal) -> (opt blob) query;

  // public queries
  icrc84_supported_tokens : () -> (vec Token) query;
  icrc84_token_info : (Token) -> (TokenInfo) query;

  // private queries
  icrc84_query : (vec Token) -> (
    vec record {
      Token;
      record {
        credit : int;
        tracked_deposit : opt Amount;
      };
    }
  ) query;

  // updates
  icrc84_notify : (NotifyArg) -> (NotifyResponse);
  icrc84_deposit : (DepositArgs) -> (DepositResponse);
  icrc84_withdraw : (WithdrawArgs) -> (WithdrawResponse);

  // BTC API

  btc_depositAddress : (opt principal) -> (text) query;
  btc_notify : () -> (
    variant {
      Ok : record {
        credit : int;
        credit_inc : nat;
        deposit_inc : nat;
      };
      Err : variant {
        AlreadyProcessing;
        CallLedgerError : record { message : text };
        GenericError : record {
          error_code : nat64;
          error_message : text;
        };
        NoNewUtxos : record {
          current_confirmations : opt nat32;
          pending_utxos : opt vec record {
            confirmations : nat32;
            outpoint : record {
              txid : vec nat8;
              vout : nat32;
            };
            value : nat64;
          };
          required_confirmations : nat32;
          suspended_utxos : opt vec record {
            earliest_retry : nat64;
            reason : variant {
              Quarantined;
              ValueTooSmall;
            };
            utxo : record {
              height : nat32;
              outpoint : record {
                txid : vec nat8;
                vout : nat32;
              };
              value : nat64;
            };
          };
        };
        NotAvailable : record { message : text };
        TemporarilyUnavailable : text;
        NotMinted;
      };
    }
  );
  btc_withdraw : (
    record {
      amount : nat;
      to : text;
    }
  ) -> (
    variant {
      Ok : record { block_index : nat64 };
      Err : variant {
        AllowanceChanged : record { current_allowance : nat };
        AlreadyProcessing;
        AmountTooLow : nat64;
        BadFee : record { expected_fee : nat };
        CreatedInFuture : record { ledger_time : nat64 };
        Duplicate : record { duplicate_of : nat };
        Expired : record { ledger_time : nat64 };
        GenericError : record { error_code : reserved };
        InsufficientAllowance : record { allowance : nat64 };
        InsufficientCredit : record {};
        InsufficientFunds : record { balance : reserved };
        MalformedAddress : text;
        TemporarilyUnavailable : reserved;
        TooOld;
      };
    }
  );
  btc_withdrawal_status : (record { block_index : nat64 }) -> (
    variant {
      AmountTooLow;
      Confirmed : record { txid : blob };
      Pending;
      Reimbursed : record {
        account : record {
          owner : principal;
          subaccount : opt blob;
        };
        amount : nat64;
        mint_block_index : nat64;
        reason : variant {
          CallFailed;
          TaintedDestination : record {
            kyt_fee : nat64;
            kyt_provider : principal;
          };
        };
      };
      Sending : record { txid : blob };
      Signing;
      Submitted : record { txid : blob };
      Unknown;
      WillReimburse : record {
        account : record {
          owner : principal;
          subaccount : opt blob;
        };
        amount : nat64;
        reason : variant {
          CallFailed;
          TaintedDestination : record {
            kyt_fee : nat64;
            kyt_provider : principal;
          };
        };
      };
    }
  );

  // Cycles API

  cycles_withdraw : (record { to : principal; amount : nat }) -> (
    variant {
      Ok : record { amount : nat };
      Err : variant {
        FailedToWithdraw : record {
          rejection_code : variant {
            NoError;
            CanisterError;
            SysTransient;
            DestinationInvalid;
            Unknown;
            SysFatal;
            CanisterReject;
          };
          fee_block : opt nat;
          rejection_reason : text;
        };
        GenericError : record { message : text; error_code : nat };
        TemporarilyUnavailable;
        Duplicate : record { duplicate_of : nat };
        InsufficientCredit : record {};
        TooLowAmount : record {};
        BadFee : record { expected_fee : nat };
        InvalidReceiver : record { receiver : principal };
        CreatedInFuture : record { ledger_time : nat64 };
        TooOld;
        InsufficientFunds : record { balance : nat };
      };
    }
  );

  // auction API

  // system queries
  getQuoteLedger : () -> (principal) query;
  nextSession : () -> (
    record {
      timestamp : nat;
      counter : nat;
    }
  ) query;
  settings : () -> (record { orderQuoteVolumeMinimum : nat; orderQuoteVolumeStep : nat; orderPriceDigitsLimit : nat }) query;
  indicativeStats : (principal) -> (IndicativeStats) query;

  // user queries
  queryTokenBids : (Token) -> (vec record { OrderId; Order }, SessionNumber) query;
  queryBids : () -> (vec record { OrderId; Order; SessionNumber }) query;
  queryTokenAsks : (Token) -> (vec record { OrderId; Order }, SessionNumber) query;
  queryAsks : () -> (vec record { OrderId; Order; SessionNumber }) query;
  queryCredit : (Token) -> (record { total : nat; available : nat; locked : nat }, SessionNumber) query;
  queryCredits : () -> (vec record { principal; record { total : nat; available : nat; locked : nat }; SessionNumber }) query;
  queryPoints : () -> (nat) query;

  // Providing token in the arguments to history queries will filter results by token

  // return values are: timestamp in nanoseconds; type; ICRC1 ledger principal; operation volume;
  queryDepositHistory : (opt Token, nat, nat) -> (vec record { nat64; variant { deposit; withdrawal }; Token; nat }) query;
  // return values are: timestamp in nanoseconds; number of auction session; transaction type; ICRC1 ledger principal; transaction volume; transaction price
  queryTransactionHistory : (opt Token, nat, nat) -> (vec record { nat64; nat; variant { ask; bid }; Token; nat; float64 }) query;
  // return values are: timestamp in nanoseconds; number of auction session; ICRC1 ledger principal; volume sold; price
  queryPriceHistory : (opt Token, nat, nat, bool) -> (vec record { nat64; nat; Token; nat; float64 }) query;

  auction_query : (
    vec Token,
    record {
      session_numbers : opt bool;
      asks : opt bool;
      bids : opt bool;
      credits : opt bool;
      deposit_history : opt record { nat; nat };
      transaction_history : opt record { nat; nat };
      price_history : opt record { nat; nat; bool };
      reversed_history : opt bool;
      last_prices : opt bool;
    },
  ) -> (
    record {
      session_numbers : vec record { Token; SessionNumber };
      asks : vec record { OrderId; Order };
      bids : vec record { OrderId; Order };
      credits : vec record {
        Token;
        record { total : nat; available : nat; locked : nat };
      };
      deposit_history : vec record {
        nat64;
        variant { deposit; withdrawal };
        Token;
        nat;
      };
      transaction_history : vec record {
        nat64;
        nat;
        variant { ask; bid };
        Token;
        nat;
        float64;
      };
      price_history : vec record { nat64; nat; Token; nat; float64 };
      last_prices : vec record { nat64; nat; Token; nat; float64 };
      points : nat;
    }
  ) query;

  // update
  manageOrders : (opt CancellationArg, PlaceArg, opt SessionNumber) -> (ManageOrdersResponse);

  placeAsks : (vec record { Token; nat; float64 }, opt SessionNumber) -> (vec PlaceOrderResponse);
  replaceAsk : (OrderId, nat, float64, opt SessionNumber) -> (ReplaceOrderResponse);
  cancelAsks : (vec OrderId, opt SessionNumber) -> (vec CancelOrderResponse);

  placeBids : (vec record { Token; nat; float64 }, opt SessionNumber) -> (vec PlaceOrderResponse);
  replaceBid : (OrderId, nat, float64, opt SessionNumber) -> (ReplaceOrderResponse);
  cancelBids : (vec OrderId, opt SessionNumber) -> (vec CancelOrderResponse);

  // ADMIN API
  // query
  listAdmins : () -> (vec principal) query;
  // update
  addAdmin : (principal) -> ();
  removeAdmin : (principal) -> ();
  registerAsset : (principal, nat) -> (variant { Ok : nat; Err : variant { AlreadyRegistered } });
};
